{"version":3,"sources":["index.js"],"names":["Vue","component","props","template","app","el","data","robotIsTyping","messages","text","fromUser","lastSeen","computed","date","Date","getHours","getMinutes","messageGroups","_","forEach","message","key","lastMessageGroup","last","shouldCreateNewGroup","isEmpty","newMessageGroup","push","shouldCreateNewRobotGroup","newRobotMessageGroup","isTyping","messengerContentEditableInput","inputApp","newMessageText","methods","sendNewMessage"],"mappings":"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","file":"index.js","sourcesContent":["Vue.component('message-groups-iterator', {\n  props: [\n    'messageGroups'\n  ],\n  template: `\n    <div>\n      <message-group-dispatcher\n        v-for=\"messageGroup in messageGroups\"\n        v-bind:messageGroup=\"messageGroup\"\n      >\n      </message-group-dispatcher>\n    </div>\n  `\n})\n\nVue.component('message-group-dispatcher', {\n  props: [\n    'messageGroup'\n  ],\n  template: `\n    <user-messages-container\n      v-if=\"messageGroup.fromUser\"\n      v-bind:userMessages=\"messageGroup.messages\"\n    >\n    </user-messages-container>\n    <robot-messages-container\n      v-else\n      v-bind:robotMessages=\"messageGroup.messages\"\n      v-bind:isTyping=\"messageGroup.isTyping\"\n    >\n    </robot-messages-container>\n  `\n})\n\nVue.component('user-messages-container', {\n  props: ['userMessages'],\n  template: `\n    <div class=\"_1t_p clearfix\">\n      <div class=\"_41ud\">\n        <h5 class=\"_ih3 _-ne\">\n          <span class=\"_3oh-\">MickaÃ«l</span>\n        </h5>\n        <user-message \n          v-for=\"message in userMessages\" \n          v-bind:message=\"message\"\n        >\n        </user-message>\n      </div>\n    </div>\n  `\n})\n\nVue.component('user-message', {\n  props: ['message'],\n  template: `\n    <div class=\"clearfix _o46 _3erg _3i_m _nd_ direction_ltr text_align_ltr\">\n      <div class=\"_3058 _ui9 _hh7 _s1- _52mr _43by _3oh-\" id=\"js_1zj\">\n        <div class=\"_aok\">\n          <span class=\"_3oh- _58nk\">{{ message.text }}</span>\n        </div>\n      </div>\n      <span class=\"_40fu\"><span class=\"_2u_d\"></span></span>\n      <last-seen-message-by-robot v-if=\"message.lastSeen\">\n      </last-seen-message-by-robot>\n    </div>\n  `\n})\n\nVue.component('robot-messages-container', {\n  props: ['robotMessages', 'isTyping'],\n  template: `\n    <div class=\"_1t_p clearfix\">\n      <div class=\"_1t_q\">\n        <div class=\"_4ldz _1t_r\" data-tooltip-content=\"Patrick Bateman 4:35pm\" data-hover=\"tooltip\" data-tooltip-position=\"left\" style=\"width: 32px; height: 32px;\">\n          <div class=\"_4ld-\" style=\"width: 32px; height: 32px;\">\n            <img alt=\"Patrick Bateman\" src=\"./Messenger_files/17499392_1651165904924361_806913937995688309_n.png\" height=\"32\" width=\"32\" class=\"img\">\n          </div>\n          <div class=\"_4ld_ _2pom\">\n            <div class=\"_2pon _2poo\">\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"_41ud\">\n        <h5 class=\"_ih3 _-ne\"><span class=\"_3oh-\">Patrick Bateman</span>\n        </h5>\n        <div class=\"clearfix _o46 _3erg _29_7 direction_ltr text_align_ltr\">\n          <template v-for=\"message in robotMessages\">\n            <robot-message v-bind:message=\"message\" >\n            </robot-message>\n            <span class=\"_40fu\"><span class=\"_2u_d\"></span></span>\n            <last-seen-message-by-robot v-if=\"message.lastSeen\">\n            </last-seen-message-by-robot>\n          </template>\n          <robot-is-typing-message v-if=\"isTyping\">\n          </robot-is-typing-message>\n        </div>\n      </div>\n    </div>\n  `\n})\n\nVue.component('robot-message', {\n  props: ['message'],\n  template: `\n    <div class=\"_3058 _ui9 _hh7 _s1- _52mr _3oh-\">\n      <div class=\"_aok\">\n        <span class=\"_3oh- _58nk\">{{ message.text }}</span>\n      </div>\n    </div>\n  `\n})\n\nVue.component('robot-is-typing-message', {\n  template: `\n    <div class='jsm-chat-message jsm-left jsm-typing-indicator' style='margin-left: 0px;'>\n      <span class='no-wrap-space'></span><span class='no-wrap-space'></span><span class='no-wrap-space'></span>\n    </div>\n  `\n})\n\nVue.component('last-seen-message-by-robot', {\n  template: `<span class=\"_4jzq _jf4 _jf5\"><img alt=\"Seen by Patrick Bateman at 4:35pm\" class=\"_jf2 img\" src=\"./Messenger_files/17499392_1651165904924361_806913937995688309_n.png\" title=\"Seen by Patrick\"></span>`\n})\n\nconst app = new Vue({\n  el: '#js_1',\n\n  template: `\n    <div>\n      <h4 class=\"_497p _2lpt\">\n        <time class=\"_3oh-\"><span id='time'>{{now}}</span></time>\n      </h4>\n      <message-groups-iterator v-bind:messageGroups=\"messageGroups\"\n        v-bind:robotIsTyping=\"robotIsTyping\"\n      >\n      </message-groups-iterator >\n    </div>\n  `,\n\n  data: {\n    robotIsTyping: false,\n\n    messages: [\n      { text: 'test', fromUser: true, lastSeen: false },\n      { text: 'test2', fromUser: false, lastSeen: true },\n      { text: 'test3', fromUser: false, lastSeen: true },\n      { text: 'test4', fromUser: false, lastSeen: true },\n      { text: 'test56efWWW', fromUser: false, lastSeen: true }\n    ]\n  },\n\n  computed: {\n    'now' () {\n      const date = new Date()\n      return date.getHours() + ':' + date.getMinutes()\n    },\n\n    /**\n     * Group messages in a way we can construct\n     * the chat interface\n     * and add relevant metadata\n     */\n    'messageGroups' () {\n      const messageGroups = []\n\n      _.forEach(this.messages, function (message, key, messages) {\n        const lastMessageGroup = _.last(messageGroups)\n        const shouldCreateNewGroup = _.isEmpty(lastMessageGroup) ||\n          (lastMessageGroup.fromUser !== message.fromUser)\n\n        if (shouldCreateNewGroup) {\n          const newMessageGroup = {\n            messages: [message],\n            fromUser: message.fromUser\n          }\n\n          messageGroups.push(newMessageGroup)\n          return\n        }\n\n        lastMessageGroup.messages.push(message)\n      })\n\n      // Adding typing indicator if necessary\n      const lastMessageGroup = _.last(messageGroups)\n      const shouldCreateNewRobotGroup = _.isEmpty(lastMessageGroup) || lastMessageGroup.fromUser\n\n      if (shouldCreateNewRobotGroup) {\n        const newRobotMessageGroup = {\n          messages: [],\n          fromUser: false,\n          isTyping: this.robotIsTyping\n        }\n\n        messageGroups.push(newRobotMessageGroup)\n\n        return messageGroups\n      }\n\n      lastMessageGroup.isTyping = this.robotIsTyping\n\n      return messageGroups\n    }\n  }\n})\n\nconst messengerContentEditableInput = `\n  <div class=\"_5rp7 _5rp8\">\n    <div class=\"_1p1t\">\n      <div class=\"_1p1v\" id=\"placeholder-9igde\">\n      Type a message...</div>\n    </div>\n    <div class=\"_5rpb\">\n      <div aria-autocomplete=\"list\" aria-describedby=\"placeholder-9igde\" aria-expanded=\"false\" aria-haspopup=\"false\" aria-label=\"Type a message...\" aria-owns=\"js_1yt\" class=\"_5rpu\" contenteditable=\"true\" data-interaction-root-id=\"_c1m\" role=\"combobox\" spellcheck=\"true\" tabindex=\"0\" style=\"outline: none; white-space: pre-wrap; word-wrap: break-word;\">\n      </div>\n    </div>\n  </div>\n`\n\nconst inputApp = new Vue({\n  el: '#inputBlock',\n\n  data: {\n    newMessageText: ''\n  },\n\n  // template: messengerContentEditableInput,\n  template: `\n    <div class=\"_5rp7 _5rp8\">\n      <input\n        autofocus\n        placeholder=\"Type a message...\" \n        v-model=\"newMessageText\"\n        @keyup.enter=\"sendNewMessage\"\n      >\n    </div>\n  `,\n\n  methods: {\n    sendNewMessage: function () {\n      app.messages.push({ text: this.newMessageText, fromUser: true })\n      this.newMessageText = ''\n    }\n  }\n})\n"]}